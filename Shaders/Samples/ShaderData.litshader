
PROPERTIES_START // Properties
    _Return ("Return", Int) = 0
PROPERTIES_END

DEFINES_START
    #define VARYINGS_NEED_COLOR // enable attribute and varying for vertex color;

    // completely custom varying
    #define CUSTOM_VARYING0 centroid float3 example0: EXAMPLE0;
    #define CUSTOM_VARYING1 nointerpolation float3 example1: EXAMPLE1;
DEFINES_END

CBUFFER_START
    uint _Return;
CBUFFER_END

CODE_START


    #define USE_MODIFYVARYINGS
    void ModifyVaryings(Attributes attributes, VertexDescription description, inout Varyings varyings)
    {
        varyings.example0 = attributes.positionOS;
        varyings.example1 = attributes.positionOS;
    }

    // for GetViewDirectionTangentSpace
    #include "Packages/com.z3y.shaders/ShaderLibrary/CoreRP/ParallaxMapping.hlsl"

    #define USE_SURFACEDESCRIPTION
    void SurfaceDescriptionFunction(Varyings IN, inout SurfaceDescription surface)
    {
        // Light Data struct
        // directional light in forward base
        // point/spot light in forward add
        // 0 in shadowcaster and meta
        UnityLightData light = GetUnityLightData(IN);
        float3 lightDirection = light.direction;
        half3 lightColor = light.color;
        half lightAttenuation = light.attenuation;

        // View Direction (World Space)
        float3 viewDirectionWS = GetViewDirectionWS(IN.positionWS);

        // View Direction (Tangent Space)
        // Varyings parameters not available in shadowcaster and meta
        #if defined(UNITY_PASS_FORWARDBASE) || defined(UNITY_PASS_FORWARDADD)
            half3 viewDirectionTS = GetViewDirectionTangentSpace(IN.tangentWS, IN.normalWS, viewDirectionWS);
        #else
            half3 viewDirectionTS = 0;
        #endif

        #if defined(UNITY_PASS_FORWARDBASE) || defined(UNITY_PASS_FORWARDADD)
            float3 normalWS = IN.normalWS;
        #else
            float3 normalWS = 0;
        #endif

        float3 positionWS = IN.positionWS;
        
        surface.Albedo = 0;
        surface.Smoothness = 0;
        switch(_Return)
        {
            case 0: surface.Emission = lightDirection * 0.5 + 0.5; return;
            case 1: surface.Emission = lightColor; return;
            case 2: surface.Emission = lightAttenuation; return;
            case 3: surface.Emission = viewDirectionWS; return;
            case 4: surface.Emission = viewDirectionTS; return;
            case 5: surface.Emission = normalWS; return;
            case 6: surface.Emission = positionWS; return;
            case 7: surface.Emission = IN.color; return;
            case 8: surface.Emission = IN.example0; return;
            case 9: surface.Emission = IN.example1; return;
        }
    }
CODE_END