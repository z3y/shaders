PROPERTIES_START
    _Cutoff ("Alpha Cuttoff", Range(0.001, 1)) = 0.5
    _CutoutSharpness ("Cutoff Sharpness", Range(1, 0.0001)) = 0.0001
    
    [MainTexture] [NoScaleOffset] [ExtraProperty] _MainTex ("Albedo", 2D) = "white" {}
    [MainColor] _Color ("Color", Color) = (1,1,1,1)
    [TexturePacking(AO, Roughness, Metallic, None, true)]
    [Linear] [NoScaleOffset] [Tooltip(AO (R), Roughness (G), Metallic (B))] [Toggle(_MASKMAP)] _MaskMap ("Mask Map", 2D) = "white" {}
    [Indent] _Metallic ("Metallic", Range(0,1)) = 0
    _Roughness ("Roughness", Range(0,1)) = 0.5
    [UnIndent] _OcclusionStrength ("Occlusion", Range(0,1)) = 1
    [NoScaleOffset] [Normal] [ExtraProperty] [Toggle(_NORMALMAP)] _BumpMap ("Normal Map", 2D) = "bump" {}
    _BumpScale ("Normal Scale", Float) = 1

    [Toggle(_EMISSION)] [ToggleGroupStart] _EmissionToggle ("Enable Emission", Int) = 0
    [NoScaleOffset] [ExtraProperty] _EmissionMap ("Emission Map", 2D) = "white" {}
    [HDR] _EmissionColor ("Emission Color", Color) = (1,1,1)
    [Indent] _EmissionMultiplyBase ("Emission Multiply Base", Range(0,1)) = 0
    [ToggleGroupEnd] [UnIndent] _EmissionGIMultiplier ("Emission GI Multiplier", Float) = 1

    _MainTex_ScaleOffset ("", Float) = 0

    [Space(10)]
    _SpecularOcclusion ("Specular Occlusion", Range(0,3)) = 1
PROPERTIES_END


DEFINES_START
    // #define VARYINGS_NEED_TEXCOORDX (0-3)
    // #define VARYINGS_NEED_COLOR
    // #define VARYINGS_NEED_CULLFACE

    #define ATTRIBUTES_NEED_TEXCOORD0
    #define CUSTOM_VARYING0 float2 mainUV : VARYING0;

    // #define DISABLE_LIGHT_PROBE_PROXY_VOLUME // avoid unnecessary calculations and reduce the compiled size if LPPV arent used
    #define APPROXIMATE_AREALIGHT_SPECULAR // lower the smoothness in areas where theres less directionality in directional lightmaps
    // #undef UNITY_SPECCUBE_BLENDING // disable blending of 2 reflection probes
    #ifndef UNITY_SPECCUBE_BOX_PROJECTION
        #define UNITY_SPECCUBE_BOX_PROJECTION // force enable box projection on quest
    #endif
    // #define NONLINEAR_LIGHTPROBESH // used with L1 bakery probes, not recommended for VRChat

    #pragma shader_feature_local _MASKMAP
    #pragma shader_feature_local _NORMALMAP
DEFINES_END


CBUFFER_START // material properties excluding textures
    half4 _Color;
    float4 _MainTex_ST;
    half _Roughness;
    half _Metallic;
    half _BumpScale;
    half3 _EmissionColor;
    half _SpecularOcclusion;
    half _EmissionGIMultiplier;
    half _OcclusionStrength;
    half _EmissionMultiplyBase;
    half _Cutoff;
    half _CutoutSharpness;
CBUFFER_END


CODE_START

    TEXTURE2D(_MainTex);
    TEXTURE2D(_BumpMap);
    TEXTURE2D(_MaskMap);
    TEXTURE2D(_EmissionMap);
    SAMPLER(sampler_MainTex);
    SAMPLER(sampler_BumpMap);
    SAMPLER(sampler_MaskMap);
    SAMPLER(sampler_EmissionMap);

    #define USE_MODIFYATTRIBUTES // Modify attributes before the VertexDescription
    void ModifyAttributes(inout Attributes attributes)
    {

    }

    #define USE_VERTEXDESCRIPTION // VertexDescription (World Space): VertexPosition, VertexNormal, VertexTangent
    void VertexDescriptionFunction(Attributes attributes, inout VertexDescription description)
    {
        
    }

    #define USE_MODIFYVARYINGS // Modify varyings at the end of vertex shader
    void ModifyVaryings(Attributes attributes, VertexDescription description, inout Varyings varyings)
    {
        varyings.mainUV.xy = TRANSFORM_TEX(attributes.uv0.xy, _MainTex);
    }

    #define USE_SURFACEDESCRIPTION // SurfaceDescription: Albedo, Normal, Metallic, Emission, Smoothness, Occlusion, Alpha, AlphaClipThreshold, Reflectance
    void SurfaceDescriptionFunction(Varyings IN, inout SurfaceDescription surface)
    {
        float2 uv = IN.mainUV.xy;
        half4 mainTex = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, uv);
        mainTex *= _Color;
        surface.Albedo = mainTex.rgb;
        surface.Alpha = mainTex.a;

        #ifdef _NORMALMAP
            half4 normalMap = SAMPLE_TEXTURE2D(_BumpMap, sampler_BumpMap, uv);
            surface.Normal = UnpackNormalScale(normalMap, _BumpScale);
        #endif

        #ifdef _MASKMAP
            half4 maskMap = SAMPLE_TEXTURE2D(_MaskMap, sampler_MaskMap, uv);
            surface.Metallic = maskMap.b * _Metallic;
            surface.Smoothness = 1.0 - (maskMap.g * _Roughness);
            surface.Occlusion = lerp(1.0, maskMap.r, _OcclusionStrength);
        #else
            surface.Metallic = _Metallic;
            surface.Smoothness = 1.0 - _Roughness;
        #endif


        #ifdef _EMISSION
            half3 emissionMap = SAMPLE_TEXTURE2D(_EmissionMap, sampler_EmissionMap, uv).rgb;
            surface.Emission = emissionMap * _EmissionColor;

            surface.Emission *= lerp(1.0, surface.Albedo, _EmissionMultiplyBase);

            #ifdef UNITY_PASS_META
            surface.Emission *= _EmissionGIMultiplier;
            #endif
        #endif

        surface.SpecularOcclusion = _SpecularOcclusion;

        surface.AlphaClipThreshold = _Cutoff;
        surface.AlphaClipSharpness = _CutoutSharpness;

    }

    #if defined(UNITY_PASS_FORWARD)
    #define USE_MODIFYLIGHTING
    void ModifyLighting(inout GIData giData, Varyings IN, ShaderData sd, SurfaceDescription surfaceDescription)
    {

    }
    #endif
    
    #define USE_MODIFYFINALCOLOR
    void ModifyFinalColor(inout half4 finalColor, GIData giData, Varyings unpacked, ShaderData sd, SurfaceDescription surfaceDescription)
    {

    }

CODE_END

#include_optional "Assets/Settings/LitShaderConfig.litshader"
