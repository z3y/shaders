PROPERTIES_START // Properties
    _Cutoff ("Alpha Cuttoff", Range(0.001, 1)) = 0.5
    _CutoutSharpness ("Cutoff Sharpness", Range(1, 0.0001)) = 0.0001

    [MainTexture] [NoScaleOffset] [ExtraProperty] _MainTex ("Albedo", 2D) = "white" {}
    [MainColor] _Color ("Color", Color) = (1,1,1,1)

    [TexturePacking(AO, Roughness, Metallic, None, true)]
    [Tooltip(AO (R), Roughness (G), Metallic (B))]
    [Linear] [NoScaleOffset] [Toggle(_MASKMAP)] _MaskMap ("Mask Map", 2D) = "white" {}

    [Indent] _Metallic ("Metallic", Range(0,1)) = 0
    _Roughness ("Roughness", Range(0,1)) = 0.5
    [UnIndent] _OcclusionStrength ("Occlusion", Range(0,1)) = 1
    [NoScaleOffset] [Normal] [ExtraProperty] [Toggle(_NORMALMAP)] _BumpMap ("Normal Map", 2D) = "bump" {}
    _BumpScale ("Normal Scale", Float) = 1

    //[Toggle(_PARALLAXMAP)] _ParallaxMapEnable ("Enable Height Map", Int) = 0
    [NoScaleOffset] [Linear] [Toggle(_PARALLAXMAP)] [ToggleGroupStart] _ParallaxMap ("Height Map", 2D) = "white" {}
    [Indent] _Parallax ("Scale", Range (0, 0.2)) = 0.02
    _ParallaxOffset ("Parallax Offset", Range(-1, 1)) = 0
    [IntRange] [UnIndent] [ToggleGroupEnd] _ParallaxSteps ("Steps", Range(1, 32)) = 16

    [Tooltip(Mask(R), Tangent(AG))]
    [Toggle(_ANISOTROPY)] [NoScaleOffset] [ExtraProperty] [Linear] _AnisotropyMap ("Anisotropy", 2D) = "black" {}
    _Anisotropy ("", Range(-1.0, 1.0)) = 0

    [Toggle(_EMISSION)] [ToggleGroupStart] _EmissionToggle ("Enable Emission", Int) = 0
    [NoScaleOffset] [ExtraProperty] _EmissionMap ("Emission Map", 2D) = "white" {}
    [HDR] _EmissionColor ("Emission Color", Color) = (1,1,1)
    [Indent] _EmissionMultiplyBase ("Emission Multiply Base", Range(0,1)) = 0
    [Toggle(_AUDIOLINK_EMISSION)] _AudioLinkEmissionToggle ("Audio Link", Float) = 0
    [Enum(Bass, 0, Low Mids, 1, High Mids, 2, Treble, 3)] _AudioLinkEmissionBand ("Band", Int) = 0
    _AudioLinkEmissionIntensity ("AudioLink Intensity", Range(0,1)) = 0.5
    [ToggleGroupEnd] [UnIndent] _EmissionGIMultiplier ("Emission GI Multiplier", Float) = 1
    

    _MainTex_ScaleOffset ("", Float) = 0

    [Space(10)]
    [PowerSlider(2)] _specularAntiAliasingVariance ("GSAA Variance", Range(0.0, 1.0)) = 0.15
    [PowerSlider(2)] _specularAntiAliasingThreshold ("GSAA Threshold", Range(0.0, 1.0)) = 0.1
    _Reflectance ("Reflectance", Range(0,1)) = 0.5
    _SpecularOcclusion ("Specular Occlusion", Range(0,3)) = 1

    FoldoutMainEnd_PropertiesLocal ("", Float) = 0
    
    FoldoutMainStart_Details ("Details", Float) = 0
    [TexturePacking(Abledo R, Albedo G, Albedo B, Mask, false)]
    [NoScaleOffset] [Toggle(_DETAIL_ALBEDO)] [Tooltip(Albedo (RGB), Mask (A))] [ExtraProperty] _DetailAlbedo ("Detail Albedo", 2D) = "white" {}
    [Enum(Multiply X2, 0, Overlay, 1, Screen, 3)] [Indent] [UnIndent] _DetailAlbedoBlendMode ("Blend Mode", Int) = 0
    [NoScaleOffset] [Normal] [Toggle(_DETAIL_NORMAL)] [ExtraProperty] _DetailBumpMap ("Detail Normal Map", 2D) = "bump" {}
    _DetailBumpScale ("Normal Scale", Float) = 1
    [Enum(UV0, 0, UV1, 1, UV2, 2, UV3, 3)] _Detail_UV ("Detail UV", Int) = 0
    _DetailAlbedo_ScaleOffset ("", Float) = 0
    FoldoutMainEnd_Details ("", Float) = 0 // closed by the the property in the importer

    FoldoutMainStart_Wind ("Wind", Float) = 0
    [Toggle(_WIND)] _WindToggle ("Enable Wind", Float) = 0
    //2edb9ad22bcacba4985b6e9606b8d0c4
    [ExtraProperty] [Linear] [NoScaleOffset] _WindNoise ("Noise RGB", 2D) = "black" {}
    _WindScale ("Noise Scale", Float) = 0.02
    [PowerSlider(2)] _WindSpeed ("Speed", Range(0,5)) = 0.05
    _WindIntensity ("Intensity XYZ", Vector) = (0.1,0.1,0.1,0)
    [HelpBox] WindInfo ("Vertex Colors RGB used for wind intensity XYZ mask. Black = Intensity 0, White = Intensity 1", Float) = 0

PROPERTIES_END


DEFINES_START // Keywords, Defines
    //#define VARYINGS_NEED_TEXCOORDX (0-3)
    //#define VARYINGS_NEED_COLOR
    //#define VARYINGS_NEED_CULLFACE

    #if defined(_WIND)
        #define ATTRIBUTES_NEED_COLOR
    #endif

    #if defined(_DETAIL_ALBEDO) || defined(_DETAIL_NORMAL)
        #define _DETAILS_ENABLED
    #endif

    #ifdef _DETAILS_ENABLED
        #define ATTRIBUTES_NEED_TEXCOORD1
        #define ATTRIBUTES_NEED_TEXCOORD2
        #define ATTRIBUTES_NEED_TEXCOORD3
    #endif

    #define ATTRIBUTES_NEED_TEXCOORD0
    #ifndef _DETAILS_ENABLED
        #define CUSTOM_VARYING0 float2 uvData : VARYING0;
    #else
        #define CUSTOM_VARYING0 float4 uvData : VARYING0;
    #endif


    // #define DISABLE_LIGHT_PROBE_PROXY_VOLUME // avoid unnecessary calculations and reduce the compiled size if LPPV arent used
    #define APPROXIMATE_AREALIGHT_SPECULAR // lower the smoothness in areas where theres less directionality in directional lightmaps
    // #pragma multi_compile _ LOD_FADE_CROSSFADE // disabled by defualt, too many variants
    // #define _SSR // Screen-Space Reflections, expensive, requires Grab Pass enabled
    // #undef UNITY_SPECCUBE_BLENDING // disable blending of 2 reflection probes
    #ifndef UNITY_SPECCUBE_BOX_PROJECTION
        #define UNITY_SPECCUBE_BOX_PROJECTION // force enable box projection on quest
    #endif
    // #define NONLINEAR_LIGHTPROBESH // used with L1 bakery probes, not recommended for VRChat

    #pragma shader_feature_local _MASKMAP
    #pragma shader_feature_local _NORMALMAP
    #pragma shader_feature_local _DETAIL_ALBEDO
    #pragma shader_feature_local _DETAIL_NORMAL
    #pragma shader_feature_local _ANISOTROPY
    #pragma shader_feature_local _WIND
DEFINES_END


CBUFFER_START // declare all Material properties excluding textures
    half4 _Color;
    float4 _MainTex_ST;
    half _Roughness;
    half _Metallic;
    half _BumpScale;
    half3 _EmissionColor;
    half _SpecularOcclusion;
    half _EmissionGIMultiplier;
    half _OcclusionStrength;
    half _EmissionMultiplyBase;
    half _Cutoff;
    half _CutoutSharpness;
    half _DetailBumpScale;
    float4 _DetailAlbedo_ST;
    uint _Detail_UV;

    float4 _ParallaxMap_TexelSize;
    uint _ParallaxSteps;
    half _Parallax;
    half _ParallaxOffset;

    half _specularAntiAliasingVariance;
    half _specularAntiAliasingThreshold;
    uint _DetailAlbedoBlendMode;
    half _Reflectance;

    half _Anisotropy;

        
    half _WindSpeed;
    half _WindScale;
    half3 _WindIntensity;

    uint _AudioLinkEmissionBand;
    half _AudioLinkEmissionIntensity;
CBUFFER_END

DEFINES_FORWARDBASE_START
#pragma shader_feature_local _PARALLAXMAP
DEFINES_FORWARDBASE_END

DEFINES_FORWARDADD_START
#pragma shader_feature_local _PARALLAXMAP
DEFINES_FORWARDADD_END

CODE_START

    TEXTURE2D(_MainTex);
    TEXTURE2D(_BumpMap);
    TEXTURE2D(_MaskMap);
    TEXTURE2D(_EmissionMap);
    SAMPLER(sampler_MainTex);
    SAMPLER(sampler_BumpMap);
    SAMPLER(sampler_MaskMap);
    SAMPLER(sampler_EmissionMap);

    TEXTURE2D(_DetailAlbedo);
    TEXTURE2D(_DetailBumpMap);
    SAMPLER(sampler_DetailAlbedo);
    SAMPLER(sampler_DetailBumpMap);

    TEXTURE2D(_ParallaxMap);
    SAMPLER(sampler_ParallaxMap);

    TEXTURE2D(_AnisotropyMap);
    SAMPLER(sampler_AnisotropyMap);

    TEXTURE2D(_WindNoise);
    SAMPLER(sampler_WindNoise);

    #ifdef _AUDIOLINK_EMISSION
        #include_optional "Packages/com.llealloo.audiolink/Runtime/Shaders/AudioLink.cginc"
    #endif
    #ifndef AUDIOLINK_CGINC_INCLUDED
        #undef _AUDIOLINK_EMISSION
    #endif

    #define USE_MODIFYATTRIBUTES // Modify attributes before the VertexDescription
    void ModifyAttributes(inout Attributes attributes)
    {

    }

    #define USE_VERTEXDESCRIPTION // VertexDescription (World Space): VertexPosition, VertexNormal, VertexTangent
    void VertexDescriptionFunction(Attributes attributes, inout VertexDescription description)
    {
        #ifdef _WIND
            // very simple but enough to make things less static
            half3 windNoise = SAMPLE_TEXTURE2D_LOD(_WindNoise, sampler_WindNoise, (description.VertexPosition.xz * _WindScale) + (_Time.y * _WindSpeed), 0);
            windNoise = windNoise * 2.0 - 1.0;
            description.VertexPosition += windNoise * _WindIntensity * attributes.color;
        #endif
    }

    #define USE_MODIFYVARYINGS // Modify varyings at the end of vertex shader
    void ModifyVaryings(Attributes attributes, VertexDescription description, inout Varyings varyings)
    {
        varyings.uvData.xy = TRANSFORM_TEX(attributes.uv0.xy, _MainTex);

        #if defined(_DETAILS_ENABLED)
            float2 uvs[] = { attributes.uv0.xy, attributes.uv1.xy, attributes.uv2.xy, attributes.uv3.xy };
            varyings.uvData.zw = TRANSFORM_TEX(uvs[_Detail_UV], _DetailAlbedo);
        #endif
    }

    #if defined(_PARALLAXMAP) && defined(UNITY_PASS_FORWARD)
        // #include "Packages/com.z3y.shaders/ShaderLibrary/CoreRP/ParallaxMapping.hlsl"
        // #include "Packages/com.z3y.shaders/ShaderLibrary/Parallax.hlsl"
        // include relative to the shader library
        #include <CoreRP/ParallaxMapping.hlsl>
        #include <Parallax.hlsl>
    #endif

    half3 Unity_Blend_Overlay(half3 Base, half3 Blend)
    {
        half3 result1 = 1.0 - 2.0 * (1.0 - Base) * (1.0 - Blend);
        half3 result2 = 2.0 * Base * Blend;
        half3 zeroOrOne = step(Base, 0.5);
        return result2 * zeroOrOne + (1 - zeroOrOne) * result1;
    }

    half3 Unity_Blend_Screen(half3 Base, half3 Blend)
    {
        return 1.0 - (1.0 - Blend) * (1.0 - Base);
    }
    
    #define USE_SURFACEDESCRIPTION // SurfaceDescription: Albedo, Normal, Metallic, Emission, Smoothness, Occlusion, Alpha, AlphaClipThreshold, Reflectance
    void SurfaceDescriptionFunction(Varyings IN, inout SurfaceDescription surface)
    {
        
        float2 uv = IN.uvData.xy;

        #if defined(_PARALLAXMAP) && defined(UNITY_PASS_FORWARD)
            float3 viewDirectionWS = GetViewDirectionWS(IN.positionWS);
            half3 viewDirectionTS = GetViewDirectionTangentSpace(IN.tangentWS, IN.normalWS, viewDirectionWS);
            float2 parallaxOffset = ParallaxOcclusionMapping(_Parallax, uv, viewDirectionTS, _ParallaxMap, sampler_ParallaxMap, _ParallaxMap_TexelSize, _ParallaxSteps, _ParallaxOffset);
            uv += parallaxOffset;
        #endif

        half4 mainTex = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, uv);
        mainTex *= _Color;
        surface.Albedo = mainTex.rgb;
        surface.Alpha = mainTex.a;

        #ifdef _NORMALMAP
            half4 normalMap = SAMPLE_TEXTURE2D(_BumpMap, sampler_BumpMap, uv);
            surface.Normal = UnpackNormalScale(normalMap, _BumpScale);
        #endif

        #ifdef _MASKMAP
            half4 maskMap = SAMPLE_TEXTURE2D(_MaskMap, sampler_MaskMap, uv);
            surface.Metallic = maskMap.b * _Metallic;
            surface.Smoothness = 1.0 - (maskMap.g * _Roughness);
            surface.Occlusion = lerp(1.0, maskMap.r, _OcclusionStrength);
        #else
            surface.Metallic = _Metallic;
            surface.Smoothness = 1.0 - _Roughness;
        #endif

        #ifdef _EMISSION
            half3 emissionMap = SAMPLE_TEXTURE2D(_EmissionMap, sampler_EmissionMap, uv).rgb;
            surface.Emission = emissionMap * _EmissionColor;
            surface.Emission *= lerp(1.0, surface.Albedo, _EmissionMultiplyBase);

            #ifdef UNITY_PASS_META
            surface.Emission *= _EmissionGIMultiplier;
            #endif

            #if defined(_AUDIOLINK_EMISSION)
                surface.Emission = lerp(surface.Emission, surface.Emission * AudioLinkLerp(uint2(1, _AudioLinkEmissionBand)).r, _AudioLinkEmissionIntensity);
            #endif
        #endif

        #if defined(_DETAILS_ENABLED)
            float2 detailUV = IN.uvData.zw;
        #endif

        #if defined(_DETAIL_ALBEDO)
            half4 detailAlbedo = SAMPLE_TEXTURE2D(_DetailAlbedo, sampler_DetailAlbedo, detailUV);
            half detailMask = detailAlbedo.a;
            half3 detailAlbedoMultX2 = surface.Albedo * detailAlbedo.rgb * unity_ColorSpaceDouble.rgb;
            half3 detailAbledoOverlay = Unity_Blend_Overlay(surface.Albedo, detailAlbedo.rgb);
            half3 detailAbledoScreen = Unity_Blend_Screen(surface.Albedo, detailAlbedo.rgb);
            detailAlbedo.rgb = _DetailAlbedoBlendMode > 0.5 ? detailAbledoOverlay : detailAlbedoMultX2;
            detailAlbedo.rgb = _DetailAlbedoBlendMode > 1.5 ? detailAbledoScreen : detailAlbedo.rgb;
            surface.Albedo = lerp(surface.Albedo, detailAlbedo.rgb, detailMask);
        #else
            half detailMask = 1.0;
        #endif

        #if defined(_DETAIL_NORMAL)
            half4 detailNormalMap = SAMPLE_TEXTURE2D(_DetailBumpMap, sampler_DetailBumpMap, detailUV);
            half3 detailNormal = UnpackNormalScale(detailNormalMap, _DetailBumpScale * detailMask);
            surface.Normal = BlendNormal(surface.Normal, detailNormal);
        #endif


        surface.SpecularOcclusion = _SpecularOcclusion;

        surface.AlphaClipThreshold = _Cutoff;
        surface.AlphaClipSharpness = _CutoutSharpness;

        surface.GSAAVariance = _specularAntiAliasingVariance;
        surface.GSAAThreshold = _specularAntiAliasingThreshold;

        surface.Reflectance = _Reflectance;

        #ifdef _ANISOTROPY
            half4 anisotropyMap = SAMPLE_TEXTURE2D(_AnisotropyMap, sampler_AnisotropyMap, uv);
            half4 tangentMap = half4(1,anisotropyMap.g,1,anisotropyMap.a);
            surface.Tangent = UnpackNormalAG(tangentMap);
            surface.Anisotropy = _Anisotropy * anisotropyMap.r;
        #endif
    }

    #if defined(UNITY_PASS_FORWARD)
    #define USE_MODIFYLIGHTING
    void ModifyLighting(inout GIData giData, Varyings IN, ShaderData sd, SurfaceDescription surfaceDescription)
    {

    }
    #endif
    
    #define USE_MODIFYFINALCOLOR
    void ModifyFinalColor(inout half4 finalColor, GIData giData, Varyings unpacked, ShaderData sd, SurfaceDescription surfaceDescription)
    {

    }

CODE_END


// more specific defines/keywords per pass
DEFINES_FORWARDBASE_START
#pragma shader_feature_local _AUDIOLINK_EMISSION
DEFINES_FORWARDBASE_END


DEFINES_FORWARDADD_START

DEFINES_FORWARDADD_END


DEFINES_SHADOWCASTER_START
#pragma skip_variants _MASKMAP
#pragma skip_variants _NORMALMAP
#pragma skip_variants _DETAIL_ALBEDO
#pragma skip_variants _DETAIL_NORMAL
#pragma skip_variants _ANISOTROPY
DEFINES_SHADOWCASTER_END


DEFINES_META_START
#pragma skip_variants _WIND
DEFINES_META_END

#include_optional "Assets/Settings/LitShaderConfig.litshader"
